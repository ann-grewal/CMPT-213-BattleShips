package model;

import java.util.*;

/* Fort Class handles everything about a specific fort including its fort index, generating randomly shaped Units to
    populate it with, and calculating how many points the fort wins each round.
  Random Forts are generated by first picking a random free Unit, and then randomly adding a free Unit touching the last
    4 times over. A default 5-Unit Fort is provided to fall back on. If all else fails, throws an error for Main.*/

public class Fort {
    private final int DIRECTIONS = 4;
    private final int FORT_SIZE = 5;
    private final int fortIndex;
    private final Grid gameGrid;
    private final List<Unit> fortUnits = new ArrayList<>();
    private final List<Integer> POINTS = new ArrayList<>(Arrays.asList(20, 20, 5, 2, 1));

    public Fort(Grid gameGrid, int fortIndex) throws RuntimeException {
        this.gameGrid = gameGrid;
        this.fortIndex = fortIndex;

        // Add Units to Fort.
        addUnit(randomFirstUnit(DIRECTIONS - 1));
        boolean successfulPopulation = populateFort();
        if (!successfulPopulation) {
            purgeFort();
            defaultFort();
        }
    }

    // Get all touching units (by index) to a given index.
    private List<Integer> touchingIndex(int index) {
        List<Integer> touchingIndex = new ArrayList<>();
        if (index % gameGrid.getGridSize() != 0) {
            touchingIndex.add(index - 1);
        }
        if (index % gameGrid.getGridSize() != gameGrid.getGridSize() - 1) {
            touchingIndex.add(index + 1);
        }
        if (index > gameGrid.getGridSize() - 1) {
            touchingIndex.add(index - gameGrid.getGridSize());
        }
        if (index < gameGrid.getNumUnits() - gameGrid.getGridSize()) {
            touchingIndex.add(index + gameGrid.getGridSize());
        }
        return touchingIndex;
    }

    // Get all free touching units (by index) to a given index, using stream.
    private List<Unit> freeTouchingUnits(int index) {
        List<Integer> touchingIndex = touchingIndex(index);
        return touchingIndex.stream()
                .filter(num -> !gameGrid.getGridUnit(num).isInFort())
                .map(gameGrid::getGridUnit)
                .toList();
    }

    // Checks if the + default Fort is possible somewhere on Grid.
    private void defaultFortPossible() throws RuntimeException {
        for (int i = 0; i < gameGrid.getNumUnits(); i++) {
            List<Unit> touchingUnits = freeTouchingUnits(i);
            if (touchingUnits.size() == DIRECTIONS) {
                return;
            }
        }
        throw new RuntimeException("Not Enough Space");
    }

    // Choose a random first Unit with spacing from other Forts.
    private Unit randomFirstUnit(int spacing) throws RuntimeException {
        defaultFortPossible();
        while (true) {
            int randomIndex = (int) (Math.random() * (gameGrid.getNumUnits()));
            Unit randomUnit = gameGrid.getGridUnit(randomIndex);
            if (randomUnit.isInFort()) {
                continue;
            }
            List<Unit> touchingUnits = freeTouchingUnits(randomIndex);
            if (touchingUnits.size() < spacing) {
                continue;
            }
            return randomUnit;
        }
    }

    // Use regular random method to populate Fort.
    private boolean populateFort() {
        Unit referenceUnit = fortUnits.getLast();

        while (fortUnits.size() < FORT_SIZE) {
            int referenceIndex = referenceUnit.getIndex();
            List<Unit> possibleFortUnits = freeTouchingUnits(referenceIndex);

            // Case where there is a free unit beside reference Unit.
            if (!possibleFortUnits.isEmpty()) {
                int randomIndex = (int) (Math.random() * possibleFortUnits.size());
                addUnit(possibleFortUnits.get(randomIndex));
                referenceUnit = fortUnits.getLast();
            }

            // Case where there is no free unit beside reference Unit
            if (possibleFortUnits.isEmpty()) {
                referenceUnit = fortUnits.get(referenceIndex - 1);
            }

            // Case where there is no more surrounding free units.
            if (referenceUnit == fortUnits.getFirst() && fortUnits.size() > 1) {
                // Failure to Populate.
                return false;
            }
        }
        // Successful Population.
        return true;
    }

    // Delete anything in the Fort already.
    private void purgeFort() {
        for (Unit purgeUnit : fortUnits) {
            purgeUnit.setFort(null);
        }
        fortUnits.clear();
    }

    // Build the + default Fort using stream.
    private void defaultFort() throws RuntimeException {
        Unit centerUnit = randomFirstUnit(DIRECTIONS);
        int center = centerUnit.getIndex();
        List<Integer> defaultIndex = new ArrayList<>
                (Arrays.asList(center, center + 1, center - 1,
                        center + gameGrid.getGridSize(), center - gameGrid.getGridSize()));
        defaultIndex.stream()
                .map(gameGrid::getGridUnit)
                .forEach(this::addUnit);
    }

    // Helper Function.
    private void addUnit(Unit newUnit) {
        newUnit.setFort(this);
        fortUnits.add(newUnit);
    }

    // Getters using stream
    public int getPoints() {
        long longHitUnits = fortUnits.stream()
                .filter(Unit::isHit)
                .count();
        int intHitUnits = (int) longHitUnits;
        if (intHitUnits > POINTS.size() - 1) {
            return 0;
        } else {
            return POINTS.get(intHitUnits);
        }
    }

    public int getIndex() {
        return fortIndex;
    }
}

